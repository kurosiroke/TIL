10/23 2023年よくわかる基本情報技術者 読み始める

11/1 2023年よくわかる基本情報技術者　読了
      Githubのリポジトリ「TIL」を知り、作成。
　　　Rubyの再学習

11/2  テキストのRubyの章を３章までやった
　　　　定数と変数、文字型

11/3　テキストのRubyの章をやる
      数値を学習したので、git pushしようとしたらエラー。
　　　原因：昨日cloud9でやったところをgithubで直接ファイルを変更した結果、ブランチがつながっていないことになってしまった。
      いろいろ調べてやってみたが、うまくいかず、$ git reset --hard origin/hoge　を使い、強制的に変更した。
      自分だけだからこれで問題なかったが、あまりよくない？
      調べた。
　　　　　　　　　　Qiitaより。
            ローカルリポジトリでリモートリポジトリを上書きしたい
            git pushに-fをつけると強制プッシュできます。
            既にリモートリポジトリにプッシュ済みのコミットをrebaseで編集した時にnon-fast-forwardのためプッシュできなかったりします。
            もしブランチで作業しているのが自分だけであれば強制プッシュするのが手っ取り早いです。
            
            git push origin/hoge -f
            
            ただし、強制プッシュはその他のメンバーの開発に影響を与えるので、実行する際は慎重にしてください。自分のみ作業しているブランチ以外で実行する場合は、チームメンバーの了解を得るようにしましょう。
            
            リモートリポジトリでローカルリポジトリを上書きしたい
            上記の逆パターンですね。resetコマンドを使いましょう。
            反映させたいリモートリポジトリを指定してください。

　　　気を付けよう。
(11/3) 数値　文字列　配列　ハッシュの再確認
11/4  第五章　条件分岐を学ぼう　if文の再確認。
11/5 第六章　【繰り返し処理を学ぼう】　再確認
　　　breakの使い道がうまくわからない。
11/6  第七章【メソッドを学ぼう】　メソッドはとても種類が多く、使いながら慣れていく必要がある。
　　　文字列型のメソッド
      文字列型の文字数を数える lengthメソッド
      文字列を逆にするreverseメソッド
      引数に指定した文字列が含まれているかどうかを調べるinclude?メソッド
      使用可能なメソッド一覧を表示できるmethodsメソッド
11/7 第八章【メソッドを定義してみよう】
　　　「引数」メソッドを呼び出す際、メソッドに渡す値のこと
      「戻り値」メソッドが呼ばれたときに返ってくる値のこと
      fizz_buzzをやってみた。内容は理解できるけど、これをやれと言われたら不安だと思った。
11/8 第九章【クラスについて学ぼう(1): 概念】
      いまいちclassが自信がないので、再度学習paizaでも学習してみる。
11/9 第十章【クラスについて学ぼう(2): 継承】
      継承の書き方と確認方法を学習
      仕事に行く前にpaizaでメソッドの定義を再確認を行った。
11/10　paizaで演算子を行う。
      1234と5678を足し算して、それを3倍した結果を計算して出力 →puts (1234 + 5678) * 3 ()を付けることで優先して計算するよう指示が出せる。
      　　スライムを倒したときに獲得できる金額を計算してください。
            スライムの所持金額は500円です。
            スライムの匹数は、randメソッドを使用して、1 ～ 10までの数値を求めます。
                        ↓
            number = rand (1..10) ←ランダム表示
            money  = number * 500 ←ランダム表示したものに５００を掛ける
            puts "スライムが#{number}匹あらわれた"
            puts "スライムを倒したときの獲得金額は#{money}円です"
11/11 ruby on rails でアプリを作成。
      viwesでwebpackがないとエラー
            コントローラー作って、アクション追加して。ルーティングを記述、viwesを作成。
            プレビューでエラー。
            webpackがないといわれる.
      原因
            2章【アプリケーションを作成しよう】にあるように必要なプラグインを追加していなかった。
            _app $ yarn add @babel/plugin-proposal-private-methods @babel/plugin-proposal-private-property-in-object
            これを入力したことで、正常にviwesが表示された。
      最もな原因は、見落とし。
      気を付けてみていくようにする。
11/12 paizaでRuby入門編6: 2次元配列を理解しようのmapまで受講し、演習問題をやった。
      mapが少し難しいと感じてしまった。
11/13　ポートフォリオで読み込みが遅く、簡略化されて表示されるというエラーが出ている。 [error] 3135#3135: ながなが続く。
      いろいろ検索を掛けるが、以前までは正常に表示されていたためrailsの方ではないと思う。
      おそらく別のところが影響しているようなので、引き続き対応を行う。
11/14　エラーが直せない。
      RDSに接続をしてみようとしたが、間違っていないはずのマスターキーが違うとエラー。
      エラーログより
      2023/11/14 11:57:57 [error] 3134#3134: *4 connect() to unix:///home/ec2-user/ganbaru_new/tmp/sockets/puma.sock failed (111: Connection refused) while connecting to upstream
      $ kill$(cat tmp/pids/puma.pid)を行うが、エラーが返ってくる。
      socketsフォルダはあったが、puma.sockファイルはなかった。
      作成して、実行するとエラーがなくなった。
      しかし、エラーログの3134#3134が消えない。
      検索するが解決できるものが出てこず。
      デプロイの環境を作成しなおすことを検討。
11/15　エラーの修正を行っていた。
      結果として、何も表示されなくなった。
      それだけでなく、誤って不要なファイルを作成してしまい、削除できず、悪化させた…。
　　　　(12/1 追記　管理者権限であるsudoを付けて削除していなかったことが原因)
11/16 メンター対応が三日以降の予約と知り、仕事に行く。
      仕事後、メンター対応を本日２０時に対応してくれると連絡あり。
      本日２０時より、質問ができるため、対応法を聞く。
      運営部より時間になっても音沙汰なし。
      22時ごろに明日連絡しますとあり、対応してもらえず。
      自己解決として、一からインスタンスを作り、デプロイを行おうとしたが、タイムアウトとなり、接続できませんと表示されてしまう。
11/17 運営部から連絡があり、明日であれば可能とのことだったため、明日20時よりメンター対応となった。
      本日は昨日のタイムアウトの原因を探す。
      インスタンスを起動し、パブリックIPV4に接続すると、昨日は表示されなかったWelcome to nginx!が表示される。
      MySQLにマスターキーは間違っていないはずなのエラーを吐く。
      porofolioに設定していたため、使えなかった。
11/18 ポートフォリオが動かなかった原因はハッキングの攻撃によるもの。

　　　・画面にnginxが出ている場合のエラー対処やヒントの見つけ方
      sudo tail -f /var/log/nginx/error.log
      上記でnginx系のエラーを見ることが出来るので、そこからヒントを得られる

      ・画面にnginxとは出てきてない、Railsっぽいエラー画面の場合
      和訳したときに "何か問題が発生しました"的なゆるいエラーメッセージの場合
      cd 自分のアプリケーション名
      tail -f log/production.log
      上記でエラーメッセージを確認出来るので、ヒントを得て対処する
      
      ------
      
      ・タイムアウトに関する情報が各種ログの中で見つかった場合
      和訳したときに、応答が無いです的なニュアンスの英語だった場合は、タイムアウトと呼ばれる現象の可能性が高い
      可能性として見直したいのが、データの件数がとてもおおいとか、画像とかが大量にあるとか、ハッキングbotによる無作為のアクセスの標的になっているか
      あたりが有力
      
      ここでこれらを踏まえて調査しておくとヒントになるのが、
      
      ・時間帯
      ・再現性
      
      この2つが重要

      時間帯とは、特定の時間帯でのみエラーや問題等が発生するか調査する
      再現性とは、特定のクリックや挙動をした時に、同じようにエラーや問題が発生するか？
      
      ------
      はっきんぐによる無作為アクセスの対処としては、国によるipアドレス制限が良いかもしれません
      AWSのec2に設定されているインバウンドルールの設定に手を加えたり、他のAWSの設定を変更する事でも対処が可能なので頻発するなら検索して試す。

11/19　$ history | grep scp
      これで実行した履歴が出る。
      EC２にログインして~]$ ps aux | grep puma
      動いているプーマを確認できる。
      確認後$ kil 番号で切る。
      Railsを起動する。

11/20　Python体験編に手を出す。
      paizaラーニングのDランクのやつをやり始める。
      Pytonの初級
            print("")
            printが関数。
11/21 Pyton体験版
      ・コメントアウト　#　で可能
      ・数値
            print(100 + 30)　　⇒　130　　　　(数値として出力)
            print("100 + 30")　⇒　100 + 30　(文字列として出力)
      ・演算子はRubyと同じ
      ・変数名の付け方　
            1文字目は小文字の英語と_(アンダーバー)　のみ　可能。
            2文字目は小文字の英語と_(アンダーバー)に加えて　12345(数字)　まで可能。
            関数名は使えない
            すべて小文字の英数と_のみ使用可能。
            -(ハイフン)は使えない.
            大文字も使えない。
      ・変数の使用法
            name(変数) = "paiza"
             print(name(変数) + "さん、ようこそ")
            　　　　　↳　変数は""で囲まない。
      input関数について
            name = input()
              print("Hello" + name)
                               ↳  input関数により、文字を入力することが出来るので、入力した文字が表示される。
      int関数について
            number = int(input())
             print(number)
                    ↳　int関数により、input関数の文字が数値として入力することが出来る。
      str関数について
            number = int(input())
             print("おこづかい"　+ str(number * 10) + "円")
                                   ↳　str関数により、数値が文字列と一緒に連結できる。
      if関数
            文字列が入力と一致しているのかを判定Rubyと同じ
            違うところは:(コロン)を最後につけるところ。← 忘れやすいから注意する。      
            <例>　"Hello"であれば"こんにちは"を出力する
                  greeting = input()
                  if greeting == "Hello":
                        print("こんにちは")

            <例> 数が10より上であるかどうか
                  number = int(input())
                  if number >= 10:
                        print(number)
            else を使った複数選択
            <例>　入力がpythonであればwelcomを表示し、それ以外であればGoodbyeを表示する。
                  name = input()
                  print("Hello " + name)
                  if name == "python"
                        print("Welcome")
                  else:
                        print("Goodbye")

            elif を使った、ifの設定法
            　上記の<例>のif文に、入力がPYTHONであれば、"Good mornig"を表示することを追加し、条件のものを出力する。
                  name = input()
                  print("Hello " + name)
                  if name == "python":
                        print("Welcome")
                  elif name == "PYTHON":
                        print("Good mornig")
                  else:
                        print("Goodbye")

            数値を文字列と連結する。
            <例題１>
                  1. 標準入力から整数を 1 個受け取る
                  2. その整数が 100 より小さい場合、以下のメッセージを表示する
                  Xは100より小さい
                  3. さらに、その整数が 200 より小さい場合、以下のメッセージを表示する
                  Xは100以上200より小さい
                  4. それ以外の場合、以下のメッセージを表示する
                  Xは200以上
                  * X には、その整数を当てはめる
                  number = int(input())
                  if number < 100:
                      print(str(number) + "は100より小さい")
                  elif number < 200:
                      print(str(number) + "は100以上200より小さい")
                  else:
                      print(str(number) + "は200以上")
            <例題２>
                  1. 標準入力から整数を 1 個受け取る
                  2. その整数が 0 の場合、以下のメッセージを表示する
                  Xは0
                  3. その整数が 0 より大きい場合、以下のメッセージを表示する
                  Xはプラス
                  4. それ以外の場合、以下のメッセージを表示する
                  Xはマイナス
                  ※ X には、その整数を当てはめる
                  number = int(input())
                  if number == 0:
                      print(str(number) + "は0")
                  elif number >= 0:
                      print(str(number) + "はプラス")
                  else:
                      print(str(number) + "はマイナス")

            forとrangeを使った範囲指定のループ処理について
            　forと:を使い、ループ処理を行う。
            　range関数を使い、繰り返す範囲を指定する。
                  greeting = "Hello paiza"
                  for i in range(300):
                      print(greeting)
                        ↳ これで300回Hello paizaが表示される

            標準入力で指定した回数繰り返す処理
           　 greeting = "Hello paiza"
           　 count = int(input())
            
          　  for i in range(count):
          　      print(greeting)
　                   ↳ countに入力回数を代入し、rangeで使う

            標準入力で指定した文字を入力し、指定した回数繰り返す処理
             count = int(input())    ←　標準入力で指定する数が入る
            
          　 for i in range(count):　←　range関数にcountが入っているので、入力した回数文おこなわれる
                 name = input() 　 　←　input関数でnameに入力したい文字を入力
          　     print("Hello" + name)　
            ※回数のcountを3 nameをA B Cといれると、
              HelloA
              HelloB
              HelloC
                  入力した数の文と、入力した文が表示される。

            forとifは組み合わせて使うことでより多くのデータを分類できる。
            <例題>入力した回数分の、入力した数がゼロ・プラス・マイナスを繰り返し判定する
                  count = int(input())
                  print(count)

                  for i in range(count):
                      number = int(input())
                      if number == 0:
                          print(str(number) + "は0")
                      elif number > 0:
                          print(str(number) + "はプラス")
                      else:
                          print(str(number) + "はマイナス")
      　 ※ str関数と:を忘れてしまいがちなので、注意する。
11/22 python入門編2　(chapter 4　～　chapter 6)
      ・if文の比較演算子について
            ==(等しい)　>(大きい・含まない)  <(小さい・未満)  >=（より大きい・問いを含む)  <=(より小さい・問いを含む)　
            !=(左側の値と右側の値が違うか比較するときに使う) ← 比較する
            import random ←　ランダムモジュール
            変数 = random.randint(1,10)  ⇒　randint() ←　ランドイント関数
            print(変数) ← デバックのために作っていたりするときは#を行う。
            ①演習課題「大吉の確率を上げてみよう」
            　omikuji の中には、1~100までの数字がランダムで代入。
            　omikuji の数字が30~100の時は「omikujiの中身は○○なので大吉」と表示、
            　omikuji の数字が29以下の時は「omikujiの中身は○○なので大凶」と表示する。
            　例）omikujiの中身は32なので大吉
                  import random　←　ランダムモジュール
                  omikuji = random.randint(1, 100) ←　ランドイント関数
                  
                  if omikuji >= 30: 　　←←←　　　　30以上の設定を行った。
                        print("omikujiの中身は" + str(omikuji) + "なので大吉")
                  else:
                        print("omikujiの中身は" + str(omikuji) + "なので大凶"

            ②演習課題「西暦年を昭和年に変換してみよう」  
                  # coding: utf-8
                  # 西暦を昭和年に変換
                  import random
                  seireki = random.randint(1926, 1988)   #西暦年
                  print("西暦" + str(seireki) + "年は", end = "")
                  
                  # 昭和年を計算
                  showa = seireki - 1925　←　昭和１年を表示したいため、1926とはしない。
                  # 昭和年を出力
                  print("昭和" + str(showa) + "年です")

11/23  python入門１を行う。
           　 ・pythonでHTMLタグを使う。
                  print("<h1>Hello</h1>")   ←　これで<h1>タグが使える。
                  print("<p>ようこそ</p>") 　←　これで<P>タグが使える。
                  print("<b>ようこそ</b>")　 ←  これで<b>タグが使える。
      　　　　　この時、print関数が改行を含んでいるため、改行させたくない場合は、,(カンマ)で区切って一つにする。
                  print("<h1>Hello</h1>","<p>ようこそ</p>","<b>ようこそ</b>")
               これで改行されない。

             ・ランダムの表示。
                        import random
                        number = random.randint(1,6)
                        print("サイコロの目は" + str(number) + "です。")
                  random関数をinportして、から出ないと、random.random も ranndom.randint も使えない。
                  このため、真っ先にimportを行う。
                  その他の関数であるprint関数やstr関数はすでにpythonにインストールされているため、importしなくても使える。
      python入門３
            ・繰り返し処理
                  ③range関数を使い、カウント変数はiを使って一月から十二月までを表示。
               　　   　for i in range(1,13):
                   　　   　　print(str(i) + "月") 
            　　　②range関数を使い、カウント変数はiを使って「数値を0から15まで表示する」
                  　　for i in range(0,16):
                            print(i)
            　　 ①range関数を使い、カウント変数はiを使って「「ハロー、paizaラーニング」を5回表示する」
                     for i in range(5):
                            print("ハロー、paizaラーニング")
         ※インデントすることと：を忘れずに使うこと※
11/25  Ruby mapを使った二次元配列
            二次元配列は変数に[1,2,3]として、ｐメソッドで渡すが、すべて打ち込むのは複雑になりすぎてしまう。
            このため、
                  numbers = Arroy.new(4).map{Arroy.new(3,1)}
                  numbers[0][1] = 2
                  p nubers
            こうすることで、4つある配列のうち、[0]である一番目の配列の、[1]となっている2番目の配列を2に変更することが出来る。
11/26 ポートフォリオ　確認
           ・タグのモデル
            class Tag < ApplicationRecord
              has_many :attempt_and_tags, dependent: :destroy ←　attemptを消したらタグも同時に消えるように指定。
              has_many :attempts, through: :attempt_and_tags
            
              validates :tag_type, presence: true  #nilでは投稿させない
            end

      　　　・models の　attempt_and_tag.rbは、attempt の一覧表示の時に指定している。
           　 同じくmodelsのTag.rbは、タグを作るときに使っている。

      　　　・ devise :database_authenticatable, :registerable,
                     :recoverable, :rememberable, :validatable

                  database_authenticatable
                        サインイン時にユーザーの正当性を検証するためにパスワードを暗号化してDBに登録します。認証方法としてはPOSTリクエストかHTTP Basic認証が使えます。
                  registerable
                        登録処理を通してユーザーをサインアップします。また、ユーザーに自身のアカウントを編集したり削除することを許可します。
                  recoverable
                        パスワードをリセットし、それを通知します。
                  rememberable
                        保存されたcookieから、ユーザーを記憶するためのトークンを生成・削除します。
                  validatable
                        Emailやパスワードのバリデーションを提供します。独自に定義したバリデーションを追加することもできます。
            この意味がある。

            ・is_published_flag　公開非公開をラジオボダンで表示。
            　　 #公開・非公開機能
                    scope :published, -> {where(is_published_flag: true)}
                    scope :unpublished, -> {where(is_published_flag: false)}
11/28  ・コメントをrailsで文字を装飾
      　　<div>
            <div class="mr-3"><!--右に３あける-->
              <%= speech.user.name %>
              <small class="text-black-50"><%= speech.created_at.strftime('%Y/%m/%d') %></small>
              <!--smallで小さくし、Bootstrapを"text-black-50"とし、薄い灰色で表示させる-->
              <%= simple_format(speech.speech) %>
              <!--textのものはこれで自動改行される-->
            </div>
          </div>

      ・colについて
            <div class="col-xl-10 col-lg-10 col-md-12 col-sm-12 mx-auto">
            ブレークポイントは次の通り
                  クラス	ブレークポイント	コンテナの幅
                  col-nn	<576px	None(auto)
                  col-sm-nn	>=576px	540px
                  col-md-nn	>=768px	720px
                  col-lg-nn	>=992px	960px
                  col-xl-nn	>=1200px	1140px
                  col-xxl-nn	>=1400px	1320px

      　　・ .mx-auto ←　固定幅のブロックレベルのコンテンツを水平にセンタリングする
      　　・ <strong>: 強い重要性要素

11/29  重なった内容のviewsを引用して使う。
             <例><%= render 'public/attempts/attempt' %>
11/30 　before_actionを使用してログイン状態を確認する処理を実行
             before_action :authenticate_admin! 
                  ↳before_actionはRailsのコントローラに用意されたフィルターの一つで、アクションを実行する前に特定の処理を実行する。
      　論理削除(ルーティング)
             resources :profiles, only: [:edit,:update] #プロフィール
             patch 'users/withdrawal' => 'users#withdrawal', as: 'withdrawal'  # 論理削除用のルーティング
             resources :users, only: [:show] do
                   get :ganbaru
                   get :ganbatta 
             end
12/1　javaに手を出してみる。
            java入門１を始める。
                        public class Main {
                        	public static void main(String[] args) {
                        		System.out.println("hello world");
                        	}
                        }
      
                  この際、よくエラーとなるポイント。
                        ・("hello world"); ←　この;を忘れている。
                        ・(）　←　半角()と全角（）を混ぜている。
                        ・printlm　←　printlnのつづりの間違い。
                        ・Sとs、pとP　←　大文字を小文字にしたり、小文字を大文字にしたりといったミス。
      　　　　　　 この辺りはほかの言語も同じ。
            コメントアウト
                　・ //でこの後ろから一行をコメントアウトすることが出来る。
                  ・ /* ~　*/ で範囲を決めてコメントアウト。
            printlnとprintの違い
                  ・printlnはjavaでは改行されてコードが表示されるが、HTMLで表示されるときは改行されない。
                  ・printはjavaで改行しないで、続けてコードを表示することが出来るが、HTMLでは表示されるときは改行される。
12/2　JavaをHTML表示する。
      ("<p>モンスターがあらわれた</p>"); ⇒　<p>モンスターがあらわれた</p>
      ("<b>モンスターがあらわれた</b>"); ⇒　<b>モンスターがあらわれた</b>

      Javaで変数を使う
            public class Main {
            	public static void main(String[] args) {
               変数→  String player = "勇者";
            	    System.out.println(player + "は、荒野を歩いていた");
            // 		System.out.println("勇者は、モンスターと戦った");
            // 		System.out.println("勇者は、モンスターをたおした");
            	}
            }
      String関数を使って変数を指定して、実行することで編集がしやすくできている。

      // 数の表示とサイコロ
            public class Main {
            	public static void main(String[] args) {
            		double rand = Math.random() * 6 + 1;        ←　６のうち１から表示する指定をしてある。
            		int number = (int)rand;                     ←　int関数を使って、変数を整数型にしている
            		System.out.println("サイコロの目は" + number + "です");
            	}
            }
      int関数を使って整数型に変数をしているため、println関数での引数で何もつけずに変数だけを指定することで表示ができる。

<演習問題>random関数を使用して「モンスターに、**のダメージを与えた。」と
      出力をしてください。**のところには、50 ～ 99のランダムな数字を入れます
            public class Main {
                  public static void main(String[] args) {
                        double rand = Math.random() * 50 + 50;
                        int number = (int)rand;
                        System.out.println("モンスターに、" + number + "のダメージを与えた");
                  }
            }
      double rand = Math.random() * 99 + 50; これではエラーになった。
      なぜ* 50 + 50;なの？？
      (12/4)もしかして、+ 50から始まって、* 50で50を含んで50数えているから、99までということ？？

12/3 java算術演算子　+-*/% 
            *や/が優先で計算される優先順位があるが、()で優先順位変更が変えられる。

                  ★足し算で計算する
                  public class Main {
                  	public static void main(String[] args) {
                  	    int Number = 1234 * 5678 / 2;
                  		System.out.println(Number);
                  	}
                  }

                  ★変数同士を掛け算で計算する
                  public class Main {
                  	public static void main(String[] args) {
                  		int a = 31;
                  		int b = 17;
                  		System.out.println(a * b);
                  
                  	}
                  }

                  ★変数同士であまりのある計算をする
                  public class Main {
                  	public static void main(String[] args) {
                  		int x = 8;
                  		int y = 5;
                  		System.out.println(x % y);
                  
                  	}
                  }

                  ★()を使って計算する
                  public class Main {
                  	public static void main(String[] args) {
                  	    int nunber = (1234 + 5678) * 3;
                  		System.out.println(nunber);
                  	}
                  }

12/4　＃08:値段を計算してみよう　java
      // 値段を計算する
            public class Main {
            	public static void main(String[] args) {
            		int apple_price = 350; //リンゴの単価
            		int apple_num = 5;     //リンゴを買う数
            		System.out.println("リンゴの単価:" + apple_price + "円");
            		System.out.println("リンゴを買う数:" + apple_num + "個");
            		
            		int total =　apple_price * apple_num;　　　　　←　　合計はtotal = で出す。
            		System.out.println("合計金額" + total + "円");
            	}
            }
            // 値段を計算する
            public class Main {
            	public static void main(String[] args) {
            		int apple_price = (int)(Math.random() * 3 + 1) * 100; 　←　リンゴの単価をランダムで3までとして()が優先計算されるため、そのあとに*100が計算されている。
            		int apple_num = (int)(Math.random() * 10 + 1);          ←　リンゴの個数をランダムで10までとして、1から表示させる。
            		System.out.println("リンゴの単価:" + apple_price + "円");
            		System.out.println("リンゴを買う数:" + apple_num + "個");
            		
            		int total =apple_price * apple_num;
            		System.out.println("合計金額" + total + "円");
            	}
            }

            ★演習課題　期待する出力値
                        体重100キロのスライムが、X匹あらわれた。
                        スライムの合計体重は、Yキロです。（ただし、Xは、1 ～ 10の整数） 
            public class Main {
            	public static void main(String[] args) {
            		int number =(int)(Math.random() * 10 + 1);	// 匹数 1 ～ 10までランダム表示
            		System.out.println("体重100キロのスライムが、" + number + "匹あらわれた。");
            
            		int total = number * 100;
            		System.out.println("スライムの合計体重は、" + total + "キロです。");
            	}
            }
　                        答えが合わなかった理由は、合計の部分の文章の。を忘れていたため。

      // データの種類
            int number = 100;	 これが数値型 ""で囲まない
            String text = "paiza";	これが文字列　""で囲む必要がある。
                  ☆String とSystem が似ているので気を付ける☆
            結合するときに、Rubyと違って、println()の中でさらに()で数値かどうかを指定することはないため、変数同士をそのままでつなげる。

            public class Main {
            	public static void main(String[] args) {
            		int number = 100;	// 数値
            		String text = "paiza";	// 文字列
            		System.out.println(number);
            		System.out.println(text);
                        System.out.println(number + text);
            	}
            }

      ★演習課題について
            ・int x = "50";　←エラーの原因　""　ダブルコーテーションが文字列に使うものなのに、数値で使おうとしている。
            ・String a = モンスターが;   ←エラー原因　""　で囲っていない。   
            　String b = "あらわれた";
            　System.out.println(a + b);
            ・int a = "01234";
		　int b = 56789;
                  ↳　String a = "01234";
		         String b = "56789";
                         数値型で文字列は表示できないため、文字列で数値を表示するにはStringにかえて""で囲む必要がある。

12/5　Java入門2 01:IF文による条件分岐
	// if文による条件分岐
		public class Main {
			public static void main(String[] args) {
		        int Number = 2;
		        if (Number == 1) {
		                System.out.println("スキ！"); //条件式が成立したときの処理
		        } else {
		                System.out.println("キライ"); //条件式が成立しなかったときの処理
		        }
			}
		}
	☆エラーとなる原因は{}を閉じていない、;を忘れているなどが多いため、気を付ける！

	★演習課題　if式
		// if文による条件分岐　ifのみ
		public class Main {
			public static void main(String[] args) {
				int number =(int)(Math.random() * 3 + 1);
				System.out.println("あなたの順位は" + number + "位です");
				if (number == 1){
				    System.out.println("おめでとう！");    
				}
			}
		}
		// if文による条件分岐 elseを表示する
		public class Main {
			public static void main(String[] args) {
				int number =(int)(Math.random() * 5 + 1);
				System.out.println("あなたの順位は" + number + "位です");
				if (number == 1){
				    System.out.println("おめでとう！");
				} else {
				    System.out.println("あと少し！");
				}
			}
		}
		☆Rubyとは違ってendではなく、{}で閉じる。なんかわかりやすいような気がする。

	// if文による条件分岐　else if
		public class Main {
			public static void main(String[] args) {
				int number = 1;
				if (number == 1) {
					System.out.println("スキ！");		// 条件式が成立したときの処理
				} else if (number == 2) {
				    System.out.println("どちらでもない");
				} else {
					System.out.println("キライ");		// 条件式が成立しなかったときの処理
				}
			}
		}
		☆Rubyと違ってelsifではなく、else if と分けて指定する。

	＃03:比較演算子で条件分岐してみよう
		a == b :aはbと等しい
		a > b  :aはbより大きい(aを含まない)
		a < b  :aはbより小さい(aを含まない)
		a >= b :aはb以上(aを含む)
		a <= b :aはb以下(aを含む)
		a != b :aとbは等しくない
	           Ruby,pyhonと同じ。
	★演習問題（比較演算子）
		①20才未満の場合は「○才は飲酒不可」と表示し、20才以上だったら「○才は飲酒可能」と表示する
		// if文による条件分岐　比較演算子
		public class Main {
			public static void main(String[] args) {
				int age = (int)(Math.random() * 5 + 18);
				System.out.print(age + "才は");
				if (age < 20){
				    System.out.println("飲酒不可");
				} else {
				    System.out.println("飲酒可能");
				}
			}
		}
			☆彡　< 未満を示すため、20を含まない。
		② 6位以上の場合は「●位入賞」と表示し、7位以下だったら「●位入賞圏外」と表示する。
			＞では未満ではないので、＜に変換することで未満とすることが出来るため、７位を入賞圏外にする子ができる。

12/6 ＃04:おみくじを作ってみよう
		// おみくじを作る
		// 比較演算子  ==  >  <   >=  <=  !=
		// 大吉  中吉  小吉  凶  大凶
		public class Main {
			public static void main(String[] args) {
		        int omikuji = (int)(Math.random() * 10 + 1);
		        System.out.println(omikuji);		//intの数字を表示している
			        if (omikuji == 1) {
			            System.out.println("大吉");
			        } else if (omikuji == 2) {
			            System.out.println("中吉");
			        } else if (omikuji <= 4) {      //3.4
			            System.out.println("小吉");
			        } else if (omikuji <= 6) {	//5.6
			            System.out.println("吉");
			        } else if (omikuji <= 8){	//7.8
			            System.out.println("凶");
			        } else {			//9.10
			            System.out.println("大凶");
			        }
			}
		}
	<=　以下を示す。矢印は以下と覚えて置く。

	★演習問題
	期待する出力値　omikujiの中身は(30..100)なので大吉　omikujiの中身は(1..29)なので大凶
		public class Main {
			public static void main(String[] args) {
				int omikuji = (int)(Math.random() * 100 + 1);  // randomメソッドについては次のチャプターで説明します
				if (omikuji >= 30) {				// >= 以上を示すため、30以上と指定している。　　　　
					System.out.println("omikujiの中身は" + omikuji + "なので大吉");
				} else {
					System.out.println("omikujiの中身は" + omikuji + "なので大凶");
				}
			}
		}
	＃05:RPGのクリティカルヒットを再現
		// RPGのクリティカルヒットを再現
		// 比較演算子 == > < >= <= !=
		
		
		// スライムと戦っている。
		// 1から10のサイコロをふって、
		// 6未満：サイコロの目だけダメージを与えたと表示。
		// 6以上：クリティカルヒットとして、100のダメージを与えたと表示。
		public class Main {
			public static void main(String[] args) {
		        int hit = (int)(Math.random() * 10 + 1);
		        System.out.println(hit);      //デバック用で作成中
			    	 if (hit < 6) {       //６未満
			    	    System.out.println("スライムに" + hit + "ダメージをあたえた");
			    	} else {
			    	    System.out.println("クリティカルヒット！スライムに100のダメージをあたえた");
			    	}
			}
		}

	★演習問題　
	// RPGのクリティカルヒットを再現
	// 比較演算子 == > < >= <= !=
	
	// スライムと戦っている。
	// 1から10のサイコロをふって、
	// 6未満：サイコロの目だけダメージを与えたと表示。
	// 6以上：クリティカルヒットとして、100のダメージを与えたと表示。
	// さらに、1から2のサイコロをふって、
	// 1：追加攻撃として、10のダメージを与えたと表示。
	// 2：追加攻撃に失敗したと表示。
	public class Main {
		public static void main(String[] args) {
			int hit = (int)(Math.random() * 10 + 1);
			if (hit < 6) {		//6未満
				System.out.println("スライムに" + hit + "のダメージを与えた");
			} else {
				System.out.println("クリティカルヒット!スライムに、100のダメージを与えた!!");
			}
	
			int add = (int)(Math.random() * 2 + 1); // 1から2のサイコロになるようにする
			System.out.println("追加のサイコロは、" + add);
			if (add == 1) { // 1の時の条件
				System.out.println("追加攻撃!スライムに、10のダメージを与えた!!!");
			} else {
				System.out.println("追加攻撃に失敗!");
			}
		}
	}

12/7 　java ＃06:西暦から平成何年かを求めてみよう
	// 西暦年から平成年を求める
		public class Main {
			public static void main(String[] args) {
		        int seireki = 1994;
		        System.out.println("西暦" + seireki + "年");
		        
		        //差分の数字を入れることで、引き算されるため、1988とする
		        int heisei = seireki - 1988;
		        System.out.println("平成" + heisei + "年です。");
			}
		}
  	差分の引き算をするため、1989と入れないよう気を付ける。
	 System.out.println("西暦" + seireki + "年");の、println の ln を取ると、改行されずに表示できる。
		
	// 西暦年から平成年を求める (実行年の表示)
		import java.util.Calendar;
		public class Main {
			public static void main(String[] args) {
			    Calendar calendar =  Calendar.getInstance();
			    int seireki = calendar.get(Calendar.YEAR);
			//int seireki = 1994;
			System.out.print("西暦" + seireki + "年");
			
			//差分の数字を入れることで、引き算されるため、1988とする
			int heisei = seireki - 1988;
			System.out.println("平成" + heisei + "年です。");
			}
		}
		  
12/8 Java入門　＃６　演習問題。　
			「西暦年から昭和年を計算する」
			期待する出力値
			-----
			西暦1988年は昭和63年です。
			-----
			西暦1926年は昭和1年です。
			-----
			// 西暦年から昭和年を求める
		public class Main {
			public static void main(String[] args) {
				int seireki = (int)(Math.random() * 63 + 1926);
				System.out.print("西暦" + seireki + "年は");
				昭和は西暦から1925を引いた歴のため、それを変数に代入する式を作る。
					↓
				int showa = seireki - 1925;
				System.out.println("昭和" + showa + "年です。");
			}
		}

12/9　Java入門　 ＃07:【補講】複数の条件を組み合わせてみよう - AND
		int で変数を増やし、
		if条件を追加する
		if (number1 == 1 && number2 == 1){
		}
		こうすることで、複数の条件で指定できる。
12/10 Java入門　★演習問題　
		1から10までの数値をランダムに生成して、順位として表示します。ここにif文を追加して、2位から5位の時には「あと少し」と表示する
			// 順位に合わせてメッセージを表示する
			
			public class Main {
			    public static void main(String[] args) {
			        double rand = (Math.random() * 10) + 1;
			        int number1 = (int) rand;
			        int number2 = (int) rand;		←　二つ目のnumber変数を作成することで、条件の範囲を指定できる。
			        System.out.println("あなたの順位は" + number1 + "位です");
			        if (number1 >= 2 && number2 <= 5){	← 作成した変数を指定の条件にし、&&でつなぐことで条件が作れる。
			        System.out.println("あと少し");
			        }
			    }
			}

		＃08:【補講】複数の条件を組み合わせてみよう - OR
		どちらかの条件がそろったときに使うものはOR。
		コードのifで指定するときは　(変数 ||　変数)　で区切って指定すると反映される。
12/11 Java入門　★演習問題　if文を追加して、55以下か70以上の時に「不快です」と表示する
		// 不快指数
		
		public class Main {
		    public static void main(String[] args) {
		        double rand = (Math.random() * 71) + 30;
		        int discomfort = (int) rand;
		        System.out.println("不快指数は" + discomfort + "です。");
		        if (discomfort <= 56 || discomfort>= 69){	← <= 指定の数を含む意味の以下　 >= 指定の数を含む意味の以上。
		            System.out.println("不快です");
		        } 
		    }
		}
		||でつないでいる上に、不等号での指定もしているため、範囲が大幅に指定できている。
		実行結果は、56以下と69以上は不快と表示する。ということをしてできている。

	 ＃09:【補講】条件の評価結果を理解しよう
		ifの条件が成立したときはtrue。成立しなければfalse。
		これはRubyと同じ。
			// 条件の評価結果
			public class Main {
			    public static void main(String[] args) {
			        int number = 1;
			        boolean flag = number == 1;  ← flag変数にnumber == 1を代入しているため、(flag)で指定できている。
			        if (flag) {
			            System.out.println("スキ！");
			        } else {
			            System.out.println("キライ");
			        }
			        System.out.println(flag);	←←　trueかfalseかを表示するために書いている。
			    }
			}
		boolean　←←←　文字列に使うもの。
	★演習問題　
	flag変数がtrueの時に「入賞おめでとう」と表示する
		// 順位に合わせてメッセージを表示する
		
		public class Main {
		    public static void main(String[] args) {
		        double rand = (Math.random() * 10) + 1;
		        int number = (int) rand;
		        System.out.println("あなたの順位は" + number + "位です");
		        
		        boolean flag = number <= 3;
		        if (flag) {
		            System.out.println(flag);
		        }
		    }
		}
	if文に(flag)を条件にすると、flagで設定した数値によって表示が行える。

12/12	＃10:【補講】データ型について理解しよう
	　データ型　
	　・数値： 1,2,3
	　・文字列(String)： "hello","123"
	　・論理(boolean)： true,false
	　　　数値データの種類
		・整数(Integer) 1,2,3,4...
		・実数(Float)   1.0,3.3,3.14159
		整数(Integer) 1,2,3...
		　・byte   128から127まで
		　・short  32768から32767まで
		　・int    2147483648から21474483647まで
		　・long   9223372036854775808から9223372036854775807まで
		実数(Float) 1.0,3.3,3.14159
		　・float   32ビット単精度小数点
		　・double  64ビット単精度小数点
		用途に分けて使い分ける。
	Javaでデータ型を変更できる。
	　double number1 = 3.14;      　　　　←double(実数)を変数で使う
	　System.out.println(number1);　　　　←指定した変数を表示するため、3.14が表示できる。
	　System.out.println((int)number1);　←(int)を指定して変数を出すようにしているため小数点以下を消すことが出来る。
			↑
	　データ型の変更をデータのキャストという。
	　Javaでは、データ型の前に()をつけて指定すると、データ型をキャストできる。

	"123"の文字列を整数型と実数型に変更する。
		String text ＝ "123";
		System.out.println(text);
		System.out.println(Integer.parseInt(text));
		System.out.println(Double.parseDouble(text));
	上から文字列としての123と、整数型の123、実数型の123.0が表示される。
	確認する際は、整数型と実数型の(text)の後に　* 10を行う。
	そうすることで、10がかけられるので、確認できる。

	★演習問題 // 文字列を数値に変換しよう
	   number変数の値を数値に変換して出力
		public class Main {
		    public static void main(String[] args) {
		        String text = "0.08";
		        System.out.println(Double.parseDouble(text)); 　　←実数型にするため、Doubleを指定する。
		    }
		}
	＃11:【補講】税込み金額を計算する 	
		public class Main {
		    public static void main(String[] args) {
		        int price = 1980;
		        System.out.println("定価:" + price + "円");
		        int discountPrice = (int)(price * 0.85);   //実数を整数(int)に変換している　praiceが15%offだった場合
		        System.out.println("割引金額は、" + discountPrice + "円です。");
		        int amount = (int)(discountPrice * 1.08);   //消費税が8%をのせる
		        System.out.println("税込み金額は、" + amount + "円です。");
		        int person = 5;
		        System.out.println("人数が、" + person + "人の場合。");
		        int amountPerPerson = amount / person;
		        int remainder = amount % person;　　←　余りの計算している
		        System.out.println("一人当たり" + amountPerPerson + "円、余りは" + remainder + "円です。");
		    }
		}
	実行結果
		定価:1980円
		割引金額は、1683円です。
		税込み金額は、1817円です。
		人数が、5人の場合。
		一人当たり363円、余りは2円です。
	★演習問題
	間違いを正せ。
	  五行目のint amount = price / 100 * weight;　これを、書き換える。
	// 肉の量り売り
	public class Main {
	    public static void main(String[] args) {
	        int price = 128;
	        int weight = 300;
	        int amount = (price * weight) / 100;　←　(int)型に変更は特にしなくてもいけた。
		System.out.println("100グラム" + price + "円の肉、" + weight + "グラムは、" + amount + "円です。");
	    }
	}

12/13　Java入門編3: ループ処理を学ぶ
	＃01:条件によるくり返し処理1 - while
		int i = 0;
		while (i <= 5) {  ←　５以下を条件としているため、「５で繰り返しを止めるように」という指示が入っている。
	ループ処理の最後を表示するには
		whileの条件式の{}の後に
		System.out.println("lase" + i)
			☝これを入れる。

	★演習問題①「「ハロー、paizaラーニング」と10回表示する」
	// whileによるループ処理
		public class Main {
		    public static void main(String[] args) {
			int i = 0;  		☜　①デバックのため、i変数を作って、0を指定する。
			while (i < 10){	☜　②　10未満の条件を指定する。
			System.out.println("ハローpaizaラーニング" + i);　☜　③　デバックのため、i変数の数字を出力するようにしている。
			i = i + 1;		☜　④　i変数にi+1を代入することで、カウンタ変数を更新している。
			}
		    }
		}
	
	※ i = i + 1;   ☜　④ これがないと、無限ループに陥り、エラーとなるため、注意する※
				無限ループに陥った場合、システムを強制終了するか、パソコンの電源を抜かないといけなくなる。

	★演習問題②　「数値を0から15まで表示する」
	// whileによるループ処理
		public class Main {
		    public static void main(String[] args) {
		        int i = 0;
		        while (i <= 15){	☜　15以下を表示するため、<=を指定する。

		            System.out.println(i);
		            i = i + 1;
		        }
		    }
		}

12/14 ＃02:条件によるくり返し処理2 - while
		★演習課題「1から10までの偶数を表示する」(2,4,6,8を表示する)
		// whileによるループ処理
			public class Main {
			    public static void main(String[] args) {
			        int i = 2;  ☜ ①　変数に入る値は２を入れる
			        while (i <= 10) {
			            System.out.println(i);
			            i = i + 2;　☜ ② ２づつ足していくという条件にする。
			        }    
			    }
			}
		これで偶数で表示できた。
■　Java入門編3: ループ処理を学ぶ　の　chapter 3　～　chapter 5　有料のため、できず。

12/15 ＃06:データの読み込み（標準入力）
		もともとはLINUXなどのUnix系OSで用意されていた仕組み。
		標準入力に対応するようにプログラムを作っておけば、
		プログラム実行時に、ファイルを読み込んだり、キーボードからデータを読み込んだり、
		パラメータを指定したりというように、入力先を切り替えることができます。

	＃07:データを読み込んでみよう - 標準入力	
		// 標準入力
		import java.util.*;
		
		public class Main {
		    public static void main(String[] args) {
		        Scanner sc = new Scanner(System.in);	☜Scannerを指定している。これがキーボード入力の設定？
		        String data = sc.next();	☜文字列としての指定している
		        System.out.println("hello " + data);	☜入力したデータにhelloが付け加えられる。
		    }
		}

		☝　整数型として表示するには、Scanner sc = new Scanner(System.in);のあとのStringを変える。
		　　		☟
		　　int data = sc.nextInt();	☜intの変数指定は、Iが大文字になる。数値として使う際、nexIntメソッドを使う。
		　　System.out.println(data);	☜文字列を消して、数値型のみ表示するようにする。
				☟
		整数型かを確認するには、(data * 2)などとし、計算を行い、行えればコードは正しいことになる。

		★ 演習課題「標準入力からテキストを取得する」
			// 標準入力
			import java.util.*;
			
			public class Main {
			    public static void main(String[] args) {
			        Scanner sc = new Scanner(System.in);
			        String data = sc.next();　☜文字列型にして、最後に()を忘れない。
			        System.out.print(data);
			    }
			}

		★　演習②　「標準入力から数値を取得して計算する」
			/ 標準入力
			import java.util.*;
			
			public class Main {
			    public static void main(String[] args) {
				Scanner sc = new Scanner(System.in);
					int data = sc.nextInt();		☜整数型にするため、intを指定。
					System.out.println(data * 100);
			    }
			}
	☆　あまり理解していないため、再度演習をやってみる。

12/16  ＃08:複数データを読み込んでみよう
	// 標準入力とループ処理
		import java.util.*;
		
		public class Main {
		    public static void main(String[] args) {
			Scanner sc = new Scanner(System.in);
			int count = sc.nextInt();　☜繰り返す数をはじめに指定する。
			System.out.println("データ個数" + count); ☜デバック用　一行目に繰り返す数が来るため、整数型を一行目に表示するためのもの
			
			String data;
			for (int i = 0; i < count; i++) {　
			    data = sc.next();
			    System.out.println("hello " + data);
			}
		    }
		}
	★演習課題１「同じテキストを指定回数出力する」
		// 標準入力とループ処理
			import java.util.*;
			
			public class Main {
			    public static void main(String[] args) {
			        Scanner sc = new Scanner(System.in);
			        int count = sc.nextInt();
			        
			        for (int i = 0; i < count; i++){
			            System.out.println("スライムが現れた");
			        }
			    }
			}
	★演習課題２「標準入力とfor文の組み合せ」
		// 標準入力とループ処理
	※間違い※	import java.util.*;
			
			public class Main {
			    public static void main(String[] args) {
			        Scanner sc = new Scanner(System.in);
			        int data = sc.nextInt();
			        for (int i = 0; i < data; i++) {
			            int data1 = sc.nextInt();
			            int data2 = sc.nextInt();
			            System.out.println(data1 + 1, data2);
			        }
			    }
			}
	※☆彡正解☆彡※
			import java.util.*;
			
			public class Main {
			    public static void main(String[] args) {
				Scanner sc = new Scanner(System.in);
				int data1 = sc.nextInt();
				int data2 = sc.nextInt();
				for (int i = data1; i <= data2; i++) {
				    System.out.println(i);
				}
			    }
			}
	説明を見てもわからなかったので模範回答を見た。
		間違い箇所：　１．forの前にintは指定するのはできていたが、数が足りなかった。というか、forの下から無駄に指定している。
			　　　２．for (int i = data1; i <= data2; i++){ 　☜これを正しく理解できていない。i変数に代入を行うことを忘れない。
				intでi変数を作って、その中にdata1が入る。→　i変数に代入されたものより大きく、data2より小さいものまでの整数を表示する。
					C言語には，
					　・変数の値を1だけ増やす++演算子(インクリメント演算子)
					　・変数の値を1だけ減らす--演算子(デクリメント演算子)
					が用意されている(下図)。
				つまり、変数に１を足すということ？
			　　３・System.out.println(i)　☜表示させるのはi変数だけでいい。

12/17 　昨日詰まったというかわからなった演習問題を再度やってみるも、まちがえてしまった。
	やはり、for (int i = 入力１; i <= 入力２; i++)これがうまく理解できていないことを再確認した。

	★演習課題３「指定行数分、標準入力を取得する」
	三行の文字を標準入力で修得する。
		// 標準入力とループ処理
			import java.util.*;
			
			public class Main {
			    public static void main(String[] args) {
			        Scanner sc = new Scanner(System.in);
			        int count = sc.nextInt();
			        String data;
			        for (int i = 0; i < count; i++ ){
			        data = sc.next();
			        System.out.println(data);
			        }
			    }
			}
		これについては動画で説明されていたため、理解はできた。
	最後のチャプターは有料でできなかったため、入門３を終える。

	Java入門４ 配列を指定する。
		Rubyと同じように配列を指定する。
		// 配列を作成する
			
		public class Main {
		    public static void main(String[] args) {
			String player_1 = "勇者";　　☜文字列でplayer_1変数を作って情報を入れている。
			String player_1 = "魔法使い";
			System.out.println(player_1);☜上記で作った変数を表示させる。
			System.out.println(player_2);
		
			String[] team = {"戦士", "忍者",player_1}; ☜文字列で指定し、[]を置くことで、配列の変数名が指定でき、= {}；で配列ができる。
			System.out.println(team[0]);
			System.out.println(team[1]);
			System.out.println(team[2]);
		    }
		}
		★演習問題①　// 配列の中身を出力してみよう
		public class Main {
		    public static void main(String[] args) {
		        String[] array = {"戦士","侍","僧侶","魔法使い"};
		        // この下で、arrayを出力してみよう
		        System.out.println(array[0]);
		        System.out.println(array[1]);
		        System.out.println(array[2]);
		        System.out.println(array[3]);
		    }
		}		
		
		★演習問題②　// 指定の文字を配列にする　itemの中の配列を作成。
		
		public class Main {
		    public static void main(String[] args) {
		        String item[] = {"ロングソード","ブレードソード","エクスカリバー"};
		        System.out.println(item[0]);
		        System.out.println(item[1]);
		        System.out.println(item[2]);
		    }
		}

	★演習問題③　// 変数で、配列に代入する
		public class Main {
		    public static void main(String[] args) {
		        String player_1 = "勇者";
		        String player_2 = "魔法使い";
		        String player_3 = "戦士";
		        // player_1 ~ 3を、配列に代入して、printlnメソッドで出力してください。
		        String [] tame = {player_1, player_2, player_3};
		        System.out.println(tame[0]);
		        System.out.println(tame[1]);
		        System.out.println(tame[2]);
		    }
		}
	入門４はここまでで、有料となるため、入門５を始める。

12/18 Java入門５　多次元配列の概要
		データ構造
		・変数　　　　player = "勇者";
		・配列　　　　player[0] = "勇者";
		・２次元配列　worldMap[1][2] ="城";
		
	
