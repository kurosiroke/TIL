10/23 2023年よくわかる基本情報技術者 読み始める

11/1 2023年よくわかる基本情報技術者　読了
      Githubのリポジトリ「TIL」を知り、作成。
　　　Rubyの再学習

11/2  テキストのRubyの章を３章までやった
　　　　定数と変数、文字型

11/3　テキストのRubyの章をやる
      数値を学習したので、git pushしようとしたらエラー。
　　　原因：昨日cloud9でやったところをgithubで直接ファイルを変更した結果、ブランチがつながっていないことになってしまった。
      いろいろ調べてやってみたが、うまくいかず、$ git reset --hard origin/hoge　を使い、強制的に変更した。
      自分だけだからこれで問題なかったが、あまりよくない？
      調べた。
　　　　　　　　　　Qiitaより。
            ローカルリポジトリでリモートリポジトリを上書きしたい
            git pushに-fをつけると強制プッシュできます。
            既にリモートリポジトリにプッシュ済みのコミットをrebaseで編集した時にnon-fast-forwardのためプッシュできなかったりします。
            もしブランチで作業しているのが自分だけであれば強制プッシュするのが手っ取り早いです。
            
            git push origin/hoge -f
            
            ただし、強制プッシュはその他のメンバーの開発に影響を与えるので、実行する際は慎重にしてください。自分のみ作業しているブランチ以外で実行する場合は、チームメンバーの了解を得るようにしましょう。
            
            リモートリポジトリでローカルリポジトリを上書きしたい
            上記の逆パターンですね。resetコマンドを使いましょう。
            反映させたいリモートリポジトリを指定してください。

　　　気を付けよう。
(11/3) 数値　文字列　配列　ハッシュの再確認
11/4  第五章　条件分岐を学ぼう　if文の再確認。
11/5 第六章　【繰り返し処理を学ぼう】　再確認
　　　breakの使い道がうまくわからない。
11/6  第七章【メソッドを学ぼう】　メソッドはとても種類が多く、使いながら慣れていく必要がある。
　　　文字列型のメソッド
      文字列型の文字数を数える lengthメソッド
      文字列を逆にするreverseメソッド
      引数に指定した文字列が含まれているかどうかを調べるinclude?メソッド
      使用可能なメソッド一覧を表示できるmethodsメソッド
11/7 第八章【メソッドを定義してみよう】
　　　「引数」メソッドを呼び出す際、メソッドに渡す値のこと
      「戻り値」メソッドが呼ばれたときに返ってくる値のこと
      fizz_buzzをやってみた。内容は理解できるけど、これをやれと言われたら不安だと思った。
11/8 第九章【クラスについて学ぼう(1): 概念】
      いまいちclassが自信がないので、再度学習paizaでも学習してみる。
11/9 第十章【クラスについて学ぼう(2): 継承】
      継承の書き方と確認方法を学習
      仕事に行く前にpaizaでメソッドの定義を再確認を行った。
11/10　paizaで演算子を行う。
      1234と5678を足し算して、それを3倍した結果を計算して出力 →puts (1234 + 5678) * 3 ()を付けることで優先して計算するよう指示が出せる。
      　　スライムを倒したときに獲得できる金額を計算してください。
            スライムの所持金額は500円です。
            スライムの匹数は、randメソッドを使用して、1 ～ 10までの数値を求めます。
                        ↓
            number = rand (1..10) ←ランダム表示
            money  = number * 500 ←ランダム表示したものに５００を掛ける
            puts "スライムが#{number}匹あらわれた"
            puts "スライムを倒したときの獲得金額は#{money}円です"
11/11 ruby on rails でアプリを作成。
      viwesでwebpackがないとエラー
            コントローラー作って、アクション追加して。ルーティングを記述、viwesを作成。
            プレビューでエラー。
            webpackがないといわれる.
      原因
            2章【アプリケーションを作成しよう】にあるように必要なプラグインを追加していなかった。
            _app $ yarn add @babel/plugin-proposal-private-methods @babel/plugin-proposal-private-property-in-object
            これを入力したことで、正常にviwesが表示された。
      最もな原因は、見落とし。
      気を付けてみていくようにする。
11/12 paizaでRuby入門編6: 2次元配列を理解しようのmapまで受講し、演習問題をやった。
      mapが少し難しいと感じてしまった。
11/13　ポートフォリオで読み込みが遅く、簡略化されて表示されるというエラーが出ている。 [error] 3135#3135: ながなが続く。
      いろいろ検索を掛けるが、以前までは正常に表示されていたためrailsの方ではないと思う。
      おそらく別のところが影響しているようなので、引き続き対応を行う。
11/14　エラーが直せない。
      RDSに接続をしてみようとしたが、間違っていないはずのマスターキーが違うとエラー。
      エラーログより
      2023/11/14 11:57:57 [error] 3134#3134: *4 connect() to unix:///home/ec2-user/ganbaru_new/tmp/sockets/puma.sock failed (111: Connection refused) while connecting to upstream
      $ kill$(cat tmp/pids/puma.pid)を行うが、エラーが返ってくる。
      socketsフォルダはあったが、puma.sockファイルはなかった。
      作成して、実行するとエラーがなくなった。
      しかし、エラーログの3134#3134が消えない。
      検索するが解決できるものが出てこず。
      デプロイの環境を作成しなおすことを検討。
11/15　エラーの修正を行っていた。
      結果として、何も表示されなくなった。
      それだけでなく、誤って不要なファイルを作成してしまい、削除できず、悪化させた…。
11/16 メンター対応が三日以降の予約と知り、仕事に行く。
      仕事後、メンター対応を本日２０時に対応してくれると連絡あり。
      本日２０時より、質問ができるため、対応法を聞く。
      運営部より時間になっても音沙汰なし。
      22時ごろに明日連絡しますとあり、対応してもらえず。
      自己解決として、一からインスタンスを作り、デプロイを行おうとしたが、タイムアウトとなり、接続できませんと表示されてしまう。
11/17 運営部から連絡があり、明日であれば可能とのことだったため、明日20時よりメンター対応となった。
      本日は昨日のタイムアウトの原因を探す。
      インスタンスを起動し、パブリックIPV4に接続すると、昨日は表示されなかったWelcome to nginx!が表示される。
      MySQLにマスターキーは間違っていないはずなのエラーを吐く。
      porofolioに設定していたため、使えなかった。
11/18 ポートフォリオが動かなかった原因はハッキングの攻撃によるもの。

　　　・画面にnginxが出ている場合のエラー対処やヒントの見つけ方
      sudo tail -f /var/log/nginx/error.log
      上記でnginx系のエラーを見ることが出来るので、そこからヒントを得られる

      ・画面にnginxとは出てきてない、Railsっぽいエラー画面の場合
      和訳したときに "何か問題が発生しました"的なゆるいエラーメッセージの場合
      cd 自分のアプリケーション名
      tail -f log/production.log
      上記でエラーメッセージを確認出来るので、ヒントを得て対処する
      
      ------
      
      ・タイムアウトに関する情報が各種ログの中で見つかった場合
      和訳したときに、応答が無いです的なニュアンスの英語だった場合は、タイムアウトと呼ばれる現象の可能性が高い
      可能性として見直したいのが、データの件数がとてもおおいとか、画像とかが大量にあるとか、ハッキングbotによる無作為のアクセスの標的になっているか
      あたりが有力
      
      ここでこれらを踏まえて調査しておくとヒントになるのが、
      
      ・時間帯
      ・再現性
      
      この2つが重要

      時間帯とは、特定の時間帯でのみエラーや問題等が発生するか調査する
      再現性とは、特定のクリックや挙動をした時に、同じようにエラーや問題が発生するか？
      
      ------
      はっきんぐによる無作為アクセスの対処としては、国によるipアドレス制限が良いかもしれません
      AWSのec2に設定されているインバウンドルールの設定に手を加えたり、他のAWSの設定を変更する事でも対処が可能なので頻発するなら検索して試す。

11/19　$ history | grep scp
      これで実行した履歴が出る。
      EC２にログインして~]$ ps aux | grep puma
      動いているプーマを確認できる。
      確認後$ kil 番号で切る。
      Railsを起動する。

11/20　Python体験編に手を出す。
      paizaラーニングのDランクのやつをやり始める。
      Pytonの初級
            print("")
            printが関数。
11/21 Pyton体験版
      ・コメントアウト　#　で可能
      ・数値
            print(100 + 30)　　⇒　130　　　　(数値として出力)
            print("100 + 30")　⇒　100 + 30　(文字列として出力)
      ・演算子はRubyと同じ
      ・変数名の付け方　
            1文字目は小文字の英語と_(アンダーバー)　のみ　可能。
            2文字目は小文字の英語と_(アンダーバー)に加えて　12345(数字)　まで可能。
            関数名は使えない
            すべて小文字の英数と_のみ使用可能。
            -(ハイフン)は使えない.
            大文字も使えない。
      ・変数の使用法
            name(変数) = "paiza"
             print(name(変数) + "さん、ようこそ")
            　　　　　↳　変数は""で囲まない。
      input関数について
            name = input()
              print("Hello" + name)
                               ↳  input関数により、文字を入力することが出来るので、入力した文字が表示される。
      int関数について
            number = int(input())
             print(number)
                    ↳　int関数により、input関数の文字が数値として入力することが出来る。
      str関数について
            number = int(input())
             print("おこづかい"　+ str(number * 10) + "円")
                                   ↳　str関数により、数値が文字列と一緒に連結できる。
      if関数
            文字列が入力と一致しているのかを判定Rubyと同じ
            違うところは:(コロン)を最後につけるところ。← 忘れやすいから注意する。      
            <例>　"Hello"であれば"こんにちは"を出力する
                  greeting = input()
                  if greeting == "Hello":
                        print("こんにちは")

            <例> 数が10より上であるかどうか
                  number = int(input())
                  if number >= 10:
                        print(number)
            else を使った複数選択
            <例>　入力がpythonであればwelcomを表示し、それ以外であればGoodbyeを表示する。
                  name = input()
                  print("Hello " + name)
                  if name == "python"
                        print("Welcome")
                  else:
                        print("Goodbye")

            elif を使った、ifの設定法
            　上記の<例>のif文に、入力がPYTHONであれば、"Good mornig"を表示することを追加し、条件のものを出力する。
                  name = input()
                  print("Hello " + name)
                  if name == "python":
                        print("Welcome")
                  elif name == "PYTHON":
                        print("Good mornig")
                  else:
                        print("Goodbye")

            数値を文字列と連結する。
            <例題１>
                  1. 標準入力から整数を 1 個受け取る
                  2. その整数が 100 より小さい場合、以下のメッセージを表示する
                  Xは100より小さい
                  3. さらに、その整数が 200 より小さい場合、以下のメッセージを表示する
                  Xは100以上200より小さい
                  4. それ以外の場合、以下のメッセージを表示する
                  Xは200以上
                  * X には、その整数を当てはめる
                  number = int(input())
                  if number < 100:
                      print(str(number) + "は100より小さい")
                  elif number < 200:
                      print(str(number) + "は100以上200より小さい")
                  else:
                      print(str(number) + "は200以上")
            <例題２>
                  1. 標準入力から整数を 1 個受け取る
                  2. その整数が 0 の場合、以下のメッセージを表示する
                  Xは0
                  3. その整数が 0 より大きい場合、以下のメッセージを表示する
                  Xはプラス
                  4. それ以外の場合、以下のメッセージを表示する
                  Xはマイナス
                  ※ X には、その整数を当てはめる
                  number = int(input())
                  if number == 0:
                      print(str(number) + "は0")
                  elif number >= 0:
                      print(str(number) + "はプラス")
                  else:
                      print(str(number) + "はマイナス")

            forとrangeを使った範囲指定のループ処理について
            　forと:を使い、ループ処理を行う。
            　range関数を使い、繰り返す範囲を指定する。
                  greeting = "Hello paiza"
                  for i in range(300):
                      print(greeting)
                        ↳ これで300回Hello paizaが表示される

            標準入力で指定した回数繰り返す処理
           　 greeting = "Hello paiza"
           　 count = int(input())
            
          　  for i in range(count):
          　      print(greeting)
　                   ↳ countに入力回数を代入し、rangeで使う

            標準入力で指定した文字を入力し、指定した回数繰り返す処理
             count = int(input())    ←　標準入力で指定する数が入る
            
          　 for i in range(count):　←　range関数にcountが入っているので、入力した回数文おこなわれる
                 name = input() 　 　←　input関数でnameに入力したい文字を入力
          　     print("Hello" + name)　
            ※回数のcountを3 nameをA B Cといれると、
              HelloA
              HelloB
              HelloC
                  入力した数の文と、入力した文が表示される。

            forとifは組み合わせて使うことでより多くのデータを分類できる。
            <例題>入力した回数分の、入力した数がゼロ・プラス・マイナスを繰り返し判定する
                  count = int(input())
                  print(count)

                  for i in range(count):
                      number = int(input())
                      if number == 0:
                          print(str(number) + "は0")
                      elif number > 0:
                          print(str(number) + "はプラス")
                      else:
                          print(str(number) + "はマイナス")
      　 ※ str関数と:を忘れてしまいがちなので、注意する。
11/22 python入門編2　(chapter 4　～　chapter 6)
      ・if文の比較演算子について
            ==(等しい)　>(大きい・含まない)  <(小さい・未満)  >=（より大きい・問いを含む)  <=(より小さい・問いを含む)　
            !=(左側の値と右側の値が違うか比較するときに使う) ← 比較する
            import random ←　ランダムモジュール
            変数 = random.randint(1,10)  ⇒　randint() ←　ランドイント関数
            print(変数) ← デバックのために作っていたりするときは#を行う。
            ①演習課題「大吉の確率を上げてみよう」
            　omikuji の中には、1~100までの数字がランダムで代入。
            　omikuji の数字が30~100の時は「omikujiの中身は○○なので大吉」と表示、
            　omikuji の数字が29以下の時は「omikujiの中身は○○なので大凶」と表示する。
            　例）omikujiの中身は32なので大吉
                  import random　←　ランダムモジュール
                  omikuji = random.randint(1, 100) ←　ランドイント関数
                  
                  if omikuji >= 30: 　　←←←　　　　30以上の設定を行った。
                        print("omikujiの中身は" + str(omikuji) + "なので大吉")
                  else:
                        print("omikujiの中身は" + str(omikuji) + "なので大凶"

            ②演習課題「西暦年を昭和年に変換してみよう」  
                  # coding: utf-8
                  # 西暦を昭和年に変換
                  import random
                  seireki = random.randint(1926, 1988)   #西暦年
                  print("西暦" + str(seireki) + "年は", end = "")
                  
                  # 昭和年を計算
                  showa = seireki - 1925　←　昭和１年を表示したいため、1926とはしない。
                  # 昭和年を出力
                  print("昭和" + str(showa) + "年です")

11/23  python入門１を行う。
           　 ・pythonでHTMLタグを使う。
                  print("<h1>Hello</h1>")   ←　これで<h1>タグが使える。
                  print("<p>ようこそ</p>") 　←　これで<P>タグが使える。
                  print("<b>ようこそ</b>")　 ←  これで<b>タグが使える。
      　　　　　この時、print関数が改行を含んでいるため、改行させたくない場合は、,(カンマ)で区切って一つにする。
                  print("<h1>Hello</h1>","<p>ようこそ</p>","<b>ようこそ</b>")
               これで改行されない。

             ・ランダムの表示。
                        import random
                        number = random.randint(1,6)
                        print("サイコロの目は" + str(number) + "です。")
                  random関数をinportして、から出ないと、random.random も ranndom.randint も使えない。
                  このため、真っ先にimportを行う。
                  その他の関数であるprint関数やstr関数はすでにpythonにインストールされているため、importしなくても使える。
      python入門３
            ・繰り返し処理
                  ③range関数を使い、カウント変数はiを使って一月から十二月までを表示。
               　　   　for i in range(1,13):
                   　　   　　print(str(i) + "月") 
            　　　②range関数を使い、カウント変数はiを使って「数値を0から15まで表示する」
                  　　for i in range(0,16):
                            print(i)
            　　 ①range関数を使い、カウント変数はiを使って「「ハロー、paizaラーニング」を5回表示する」
                     for i in range(5):
                            print("ハロー、paizaラーニング")
         ※インデントすることと：を忘れずに使うこと※
11/25  Ruby mapを使った二次元配列
            二次元配列は変数に[1,2,3]として、ｐメソッドで渡すが、すべて打ち込むのは複雑になりすぎてしまう。
            このため、
                  numbers = Arroy.new(4).map{Arroy.new(3,1)}
                  numbers[0][1] = 2
                  p nubers
            こうすることで、4つある配列のうち、[0]である一番目の配列の、[1]となっている2番目の配列を2に変更することが出来る。
11/26 ポートフォリオ　確認
           ・タグのモデル
            class Tag < ApplicationRecord
              has_many :attempt_and_tags, dependent: :destroy ←　attemptを消したらタグも同時に消えるように指定。
              has_many :attempts, through: :attempt_and_tags
            
              validates :tag_type, presence: true  #nilでは投稿させない
            end

      　　　・models の　attempt_and_tag.rbは、attempt の一覧表示の時に指定している。
           　 同じくmodelsのTag.rbは、タグを作るときに使っている。

      　　　・ devise :database_authenticatable, :registerable,
                     :recoverable, :rememberable, :validatable

                  database_authenticatable
                        サインイン時にユーザーの正当性を検証するためにパスワードを暗号化してDBに登録します。認証方法としてはPOSTリクエストかHTTP Basic認証が使えます。
                  registerable
                        登録処理を通してユーザーをサインアップします。また、ユーザーに自身のアカウントを編集したり削除することを許可します。
                  recoverable
                        パスワードをリセットし、それを通知します。
                  rememberable
                        保存されたcookieから、ユーザーを記憶するためのトークンを生成・削除します。
                  validatable
                        Emailやパスワードのバリデーションを提供します。独自に定義したバリデーションを追加することもできます。
            この意味がある。
